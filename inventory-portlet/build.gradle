apply plugin: 'war'

sourceCompatibility = 11
targetCompatibility = 11

buildscript {
    dependencies {
        classpath group: "com.liferay", name: "com.liferay.css.builder", version: "3.0.2"
        classpath group: "com.liferay", name: "com.liferay.gradle.plugins.css.builder", version: "5.0.1"
    }

    repositories {
        maven {
            url "https://repository-cdn.liferay.com/nexus/content/groups/public"
        }
    }
}

dependencies {
    implementation project(":modules:inventory:inventory-api")
    providedCompile group: 'javax.enterprise', name: 'cdi-api', version: '1.2'
    providedCompile group: 'javax.faces', name: 'javax.faces-api', version: '2.2'
    runtimeOnly group: 'org.glassfish', name: 'javax.faces', version: '2.2.20'
    runtimeOnly group: 'com.liferay.faces', name: 'com.liferay.faces.bridge.ext', version: '7.0.0'
    runtimeOnly group: 'com.liferay.faces', name: 'com.liferay.faces.bridge.impl', version: '5.0.0'
    compileOnly group: 'log4j', name: 'log4j', version: '1.2.17'
    compileOnly group: "com.liferay.portal", name: "release.portal.api"
}

task findRuntimeJars {
    ext.runtimeJars = []
    doLast {
        runtimeJars = configurations.runtimeClasspath.files.findAll { file ->
            file.name.endsWith(".jar") && file.absolutePath.contains(".gradle/caches")
        }.collect { it.absolutePath }
    }
}

task listRuntimeJars(dependsOn: findRuntimeJars) {
    doLast {
        findRuntimeJars.runtimeJars.each { println it }
    }
}

task deployRuntimeJars(dependsOn: findRuntimeJars) {
    doLast {
        def destinationDir = new File(rootDir, "bundles/osgi/modules")
        if (!destinationDir.exists()) {
            destinationDir.mkdirs()
        }
        findRuntimeJars.runtimeJars.each { runtimeJarPath ->
            def runtimeJarFile = new File(runtimeJarPath)
            def destinationFile = new File(destinationDir, runtimeJarFile.name)
            println "Copying ${runtimeJarFile.name} to ${destinationDir.absolutePath}"
            java.nio.file.Files.copy(runtimeJarFile.toPath(), destinationFile.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING)
        }
        println "All JAR files deployed to ${destinationDir.absolutePath}"
    }
}